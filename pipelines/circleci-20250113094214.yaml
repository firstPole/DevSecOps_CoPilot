To create a GitHub Actions workflow that checks out code, performs various security scans, runs unit tests, and deploys the application to AWS EKS while incorporating security best practices, we will structure the workflow in a YAML file. Below is a comprehensive example that integrates Git secret scanning, Software Bill of Materials (SBOM) generation, Software Composition Analysis (SCA), Static Application Security Testing (SAST), Dynamic Application Security Testing (DAST), compliance checks, and deployment to EKS.

### GitHub Actions Workflow: `.github/workflows/ci-cd-pipeline.yml`

```yaml
name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Node.js (or your preferred language)
        uses: actions/setup-node@v2
        with:
          node-version: '14' # specify your node version

      - name: Git Secret Scan
        run: |
          git secret reveal
          git secret list

      - name: Generate SBOM
        run: |
          # Example command to generate SBOM (adjust according to your tooling)
          syft packages dir:. --output json > sbom.json

      - name: Run SCA
        run: |
          # Example command for SCA (adjust according to your tooling)
          trivy fs --severity HIGH,CRITICAL .

      - name: Run Unit Tests
        run: npm test # adjust for your testing framework

      - name: Static Application Security Testing (SAST)
        run: |
          # Example command for SAST (adjust according to your tooling)
          bandit -r . 

      - name: Dynamic Application Security Testing (DAST)
        run: |
          # Example command for DAST (adjust according to your tooling)
          zap-cli quick-scan --self-contained --start-options '-config api.disablekey=true' 'http://your-app-url'

      - name: Compliance and Governance Check
        run: |
          # Example compliance check (adjust according to your tooling)
          checkov -d . 

  deploy:
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-west-2' # adjust as necessary

      - name: Deploy to EKS
        run: |
          # Update kubeconfig
          aws eks update-kubeconfig --name your-cluster-name
          
          # Deploy application (adjust your deployment strategy)
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml

      - name: Verify Deployment
        run: |
          kubectl rollout status deployment/your-deployment-name
```

### Explanation of the Workflow

1. **Triggers**: The workflow is triggered on pushes or pull requests to the `main` branch.

2. **Security Scans**: 
   - **Git Secret Scan**: This checks for any sensitive information in your git history.
   - **SBOM**: Generates a Software Bill of Materials to track dependencies.
   - **SCA**: Uses Trivy for Software Composition Analysis to identify vulnerabilities in dependencies.
   - **Unit Tests**: Runs unit tests to ensure that the codebase is functioning correctly.
   - **SAST**: Uses Bandit for static analysis to find security issues in the code.
   - **DAST**: Uses OWASP ZAP for dynamic testing of the deployed application.
   - **Compliance Check**: Uses Checkov to ensure compliance with security policies.

3. **Deployment to AWS EKS**:
   - Sets up AWS CLI with credentials stored in GitHub secrets.
   - Updates the kubeconfig for EKS.
   - Deploys the application using Kubernetes manifests.

### Security Considerations
- Use GitHub Secrets to store sensitive information like AWS credentials.
- Ensure that the EKS cluster is configured with proper network policies and RBAC to mitigate security risks.
- Regularly update dependencies to keep your project secure.

### Monitoring and Logging
- Integrate a logging solution (like AWS CloudWatch) to collect logs from your EKS cluster.
- Consider using a service mesh (e.g., Istio or Linkerd) for managing service-to-service communications and monitoring.

This workflow provides a comprehensive CI/CD setup with security scanning and deployment to AWS EKS, leveraging GitHub Actions for automation. Adjust the tools and commands based on your specific application stack and requirements.